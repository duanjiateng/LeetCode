package com.company;

/**
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1:
 *
 * 输入:
 * [
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 示例 2:
 *
 * 输入:
 * [
 *   ["8","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 * 
 * */
public class Main {

    public static void main(String[] args) {
	// write your code here
        char[][] board = {{'.', '.', '4', '.', '.', '.', '6', '3', '.'},
                          {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                          {'5', '.', '.', '.', '.', '.', '.', '9', '.'},
                          {'.', '.', '.', '5', '6', '.', '.', '.', '.'},
                          {'4', '.', '3', '.', '.', '.', '.', '.', '1'},
                          {'.', '.', '.', '7', '.', '.', '.', '.', '.'},
                          {'.', '.', '.', '5', '.', '.', '.', '.', '.'},
                          {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                          {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

        System.out.println(isValidSudoku1(board));
    }

    /**
     * 暴力解法
     * 先判断行有没有重复
     * 然后判断列有没有重复
     * 最后判断9个小九宫格有没有重复
     * */
    public static boolean isValidSudoku(char[][] board) {

        //判断行和列是否满足条件
        for( int i = 0; i < board.length; i++) {
            char[] temp1 = new char[]{'0', '0', '0', '0', '0', '0', '0', '0', '0'};
            char[] temp2 = new char[]{'0', '0', '0', '0', '0', '0', '0', '0', '0'};
            for( int j = 0; j < board[i].length; j++) {
                if(board[i][j] == '.') {

                } else if(board[i][j] != '.' && temp1[board[i][j]-49] == '0') {
                    temp1[board[i][j]-49] = '1';
                } else {
                    return false;
                }

                if(board[j][i] == '.') {
                    
                } else if(board[j][i] != '.' && temp2[board[j][i]-49] == '0') {
                    temp2[board[j][i]-49] = '1';
                } else {
                    return false;
                }
            }
        }

        for (int i = 0; i < 7; i+=3) {
            for (int j = 0; j < 7; j+=3) {
                int num1 = i + 3;
                int num2 = j + 3;
                char[] temp1 = new char[]{'0', '0', '0', '0', '0', '0', '0', '0', '0'};
                for (int m = i; m < num1; m++) {
                    for (int n = j; n < num2; n++) {
                        if(board[m][n] == '.') {
                            continue;
                        } else if(board[m][n] != '.' && temp1[board[m][n]-49] == '0') {
                            temp1[board[m][n]-49] = '1';
                        } else {
                            return false;
                        }
                    }
                }
            }
        }

        return true;
    }

    /**
     * 用空间换取时间
     *
     * board[i][j], num存在该位置的元素的整数值
     * 三个 二维数组[9][9]
     * arr1[i][num]：用来存放i行的9个数有没有重复 i:行数，num：表示数值
     * arr2[j][num]：用来存放j行的9个数有没有重复 j:列数
     * arr3[k][num]：用来存放 小九宫格的 的9个数有没有重复  k:第几个小九宫格
     *
     *
     * */
    public static boolean isValidSudoku1(char[][] board) {
        boolean[][] arr1 = new boolean[9][9];
        boolean[][] arr2 = new boolean[9][9];
        boolean[][] arr3 = new boolean[9][9];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                char c = board[i][j];
                if (c == '.')
                    continue;
                int num = c - '1';
                int k = i / 3 + (j / 3 * 3);
                if (arr1[i][num] || arr2[j][num] || arr3[k][num])
                    return false;
                arr1[i][num] = true;
                arr2[j][num] = true;
                arr3[k][num] = true;
            }
        }
        return true;
    }
}
